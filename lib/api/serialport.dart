// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:meta/meta.dart' as meta;
part 'serialport.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `from`, `from`, `from`

///获取可用的端口
Future<List<LddSerialPortInfo>> getAvailablePorts() =>
    RustLib.instance.api.crateApiSerialportGetAvailablePorts();

///查找
Future<NavitePort> tryGetPort({required String path, required int baudRate}) =>
    RustLib.instance.api
        .crateApiSerialportTryGetPort(path: path, baudRate: baudRate);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddSerialPortInfo>>
abstract class LddSerialPortInfo implements RustOpaqueInterface {
  String get portName;

  LddSerialPortType get portType;

  set portName(String portName);

  set portType(LddSerialPortType portType);

  Future<void> open();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NavitePort>>
abstract class NavitePort implements RustOpaqueInterface {
  ///写入数据
  Future<void> writeAll({required List<int> buff});
}

@freezed
sealed class LddSerialPortType with _$LddSerialPortType {
  const LddSerialPortType._();

  const factory LddSerialPortType.usbPort(
    LddUsbPortInfo field0,
  ) = LddSerialPortType_UsbPort;
  const factory LddSerialPortType.pciPort() = LddSerialPortType_PciPort;
  const factory LddSerialPortType.bluetoothPort() =
      LddSerialPortType_BluetoothPort;
  const factory LddSerialPortType.unknown() = LddSerialPortType_Unknown;
}

/// Contains all possible USB information about a `SerialPort`
@freezed
@meta.immutable
class LddUsbPortInfo with _$LddUsbPortInfo {
  const factory LddUsbPortInfo({
    required int vid,
    required int pid,
    String? serialNumber,
    String? manufacturer,
    String? product,
  }) = _LddUsbPortInfo;
}
