// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/printers.dart';
import 'api/serialport.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.1.0';

  @override
  int get rustContentHash => 107923872;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'ldd_printers',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String crateApiPrintersLddWinPrinterAutoAccessorGetDriverName(
      {required LddWinPrinter that});

  bool crateApiPrintersLddWinPrinterAutoAccessorGetIsDefault(
      {required LddWinPrinter that});

  bool crateApiPrintersLddWinPrinterAutoAccessorGetIsShared(
      {required LddWinPrinter that});

  String crateApiPrintersLddWinPrinterAutoAccessorGetLocation(
      {required LddWinPrinter that});

  String crateApiPrintersLddWinPrinterAutoAccessorGetName(
      {required LddWinPrinter that});

  LddPrinterState crateApiPrintersLddWinPrinterAutoAccessorGetState(
      {required LddWinPrinter that});

  String crateApiPrintersLddWinPrinterAutoAccessorGetSystemName(
      {required LddWinPrinter that});

  String crateApiPrintersLddWinPrinterAutoAccessorGetUri(
      {required LddWinPrinter that});

  void crateApiPrintersLddWinPrinterAutoAccessorSetDriverName(
      {required LddWinPrinter that, required String driverName});

  void crateApiPrintersLddWinPrinterAutoAccessorSetIsDefault(
      {required LddWinPrinter that, required bool isDefault});

  void crateApiPrintersLddWinPrinterAutoAccessorSetIsShared(
      {required LddWinPrinter that, required bool isShared});

  void crateApiPrintersLddWinPrinterAutoAccessorSetLocation(
      {required LddWinPrinter that, required String location});

  void crateApiPrintersLddWinPrinterAutoAccessorSetName(
      {required LddWinPrinter that, required String name});

  void crateApiPrintersLddWinPrinterAutoAccessorSetState(
      {required LddWinPrinter that, required LddPrinterState state});

  void crateApiPrintersLddWinPrinterAutoAccessorSetSystemName(
      {required LddWinPrinter that, required String systemName});

  void crateApiPrintersLddWinPrinterAutoAccessorSetUri(
      {required LddWinPrinter that, required String uri});

  Future<bool> crateApiPrintersLddWinPrinterWriteData(
      {required LddWinPrinter that,
      required List<int> buffer,
      String? jobName});

  Future<bool> crateApiPrintersLddWinPrinterWriteFile(
      {required LddWinPrinter that, required String filePath, String? jobName});

  Future<List<LddWinPrinter>> crateApiPrintersLddGetAllPrinters();

  Future<LddWinPrinter?> crateApiPrintersLddGetPrinterByName(
      {required String name});

  String crateApiSerialportLddSerialPortInfoAutoAccessorGetPortName(
      {required LddSerialPortInfo that});

  LddSerialPortType crateApiSerialportLddSerialPortInfoAutoAccessorGetPortType(
      {required LddSerialPortInfo that});

  void crateApiSerialportLddSerialPortInfoAutoAccessorSetPortName(
      {required LddSerialPortInfo that, required String portName});

  void crateApiSerialportLddSerialPortInfoAutoAccessorSetPortType(
      {required LddSerialPortInfo that, required LddSerialPortType portType});

  Future<void> crateApiSerialportLddSerialPortInfoOpen(
      {required LddSerialPortInfo that});

  Future<void> crateApiSerialportNavitePortWriteAll(
      {required NavitePort that, required List<int> buff});

  Future<List<LddSerialPortInfo>> crateApiSerialportGetAvailablePorts();

  Future<NavitePort> crateApiSerialportTryGetPort(
      {required String path, required int baudRate});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddSerialPortInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddSerialPortInfo;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LddSerialPortInfoPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddWinPrinter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddWinPrinter;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LddWinPrinterPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NavitePort;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NavitePort;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NavitePortPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiPrintersLddWinPrinterAutoAccessorGetDriverName(
      {required LddWinPrinter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPrintersLddWinPrinterAutoAccessorGetDriverNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorGetDriverNameConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_get_driver_name",
            argNames: ["that"],
          );

  @override
  bool crateApiPrintersLddWinPrinterAutoAccessorGetIsDefault(
      {required LddWinPrinter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPrintersLddWinPrinterAutoAccessorGetIsDefaultConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorGetIsDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_get_is_default",
            argNames: ["that"],
          );

  @override
  bool crateApiPrintersLddWinPrinterAutoAccessorGetIsShared(
      {required LddWinPrinter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterAutoAccessorGetIsSharedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorGetIsSharedConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_get_is_shared",
            argNames: ["that"],
          );

  @override
  String crateApiPrintersLddWinPrinterAutoAccessorGetLocation(
      {required LddWinPrinter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterAutoAccessorGetLocationConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorGetLocationConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_get_location",
            argNames: ["that"],
          );

  @override
  String crateApiPrintersLddWinPrinterAutoAccessorGetName(
      {required LddWinPrinter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterAutoAccessorGetNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorGetNameConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_get_name",
            argNames: ["that"],
          );

  @override
  LddPrinterState crateApiPrintersLddWinPrinterAutoAccessorGetState(
      {required LddWinPrinter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ldd_printer_state,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterAutoAccessorGetStateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorGetStateConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_get_state",
            argNames: ["that"],
          );

  @override
  String crateApiPrintersLddWinPrinterAutoAccessorGetSystemName(
      {required LddWinPrinter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPrintersLddWinPrinterAutoAccessorGetSystemNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorGetSystemNameConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_get_system_name",
            argNames: ["that"],
          );

  @override
  String crateApiPrintersLddWinPrinterAutoAccessorGetUri(
      {required LddWinPrinter that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterAutoAccessorGetUriConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrintersLddWinPrinterAutoAccessorGetUriConstMeta =>
      const TaskConstMeta(
        debugName: "LddWinPrinter_auto_accessor_get_uri",
        argNames: ["that"],
      );

  @override
  void crateApiPrintersLddWinPrinterAutoAccessorSetDriverName(
      {required LddWinPrinter that, required String driverName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        sse_encode_String(driverName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPrintersLddWinPrinterAutoAccessorSetDriverNameConstMeta,
      argValues: [that, driverName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorSetDriverNameConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_set_driver_name",
            argNames: ["that", "driverName"],
          );

  @override
  void crateApiPrintersLddWinPrinterAutoAccessorSetIsDefault(
      {required LddWinPrinter that, required bool isDefault}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        sse_encode_bool(isDefault, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPrintersLddWinPrinterAutoAccessorSetIsDefaultConstMeta,
      argValues: [that, isDefault],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorSetIsDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_set_is_default",
            argNames: ["that", "isDefault"],
          );

  @override
  void crateApiPrintersLddWinPrinterAutoAccessorSetIsShared(
      {required LddWinPrinter that, required bool isShared}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        sse_encode_bool(isShared, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterAutoAccessorSetIsSharedConstMeta,
      argValues: [that, isShared],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorSetIsSharedConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_set_is_shared",
            argNames: ["that", "isShared"],
          );

  @override
  void crateApiPrintersLddWinPrinterAutoAccessorSetLocation(
      {required LddWinPrinter that, required String location}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        sse_encode_String(location, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterAutoAccessorSetLocationConstMeta,
      argValues: [that, location],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorSetLocationConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_set_location",
            argNames: ["that", "location"],
          );

  @override
  void crateApiPrintersLddWinPrinterAutoAccessorSetName(
      {required LddWinPrinter that, required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterAutoAccessorSetNameConstMeta,
      argValues: [that, name],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorSetNameConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_set_name",
            argNames: ["that", "name"],
          );

  @override
  void crateApiPrintersLddWinPrinterAutoAccessorSetState(
      {required LddWinPrinter that, required LddPrinterState state}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        sse_encode_ldd_printer_state(state, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterAutoAccessorSetStateConstMeta,
      argValues: [that, state],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorSetStateConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_set_state",
            argNames: ["that", "state"],
          );

  @override
  void crateApiPrintersLddWinPrinterAutoAccessorSetSystemName(
      {required LddWinPrinter that, required String systemName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        sse_encode_String(systemName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPrintersLddWinPrinterAutoAccessorSetSystemNameConstMeta,
      argValues: [that, systemName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrintersLddWinPrinterAutoAccessorSetSystemNameConstMeta =>
          const TaskConstMeta(
            debugName: "LddWinPrinter_auto_accessor_set_system_name",
            argNames: ["that", "systemName"],
          );

  @override
  void crateApiPrintersLddWinPrinterAutoAccessorSetUri(
      {required LddWinPrinter that, required String uri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        sse_encode_String(uri, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterAutoAccessorSetUriConstMeta,
      argValues: [that, uri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrintersLddWinPrinterAutoAccessorSetUriConstMeta =>
      const TaskConstMeta(
        debugName: "LddWinPrinter_auto_accessor_set_uri",
        argNames: ["that", "uri"],
      );

  @override
  Future<bool> crateApiPrintersLddWinPrinterWriteData(
      {required LddWinPrinter that,
      required List<int> buffer,
      String? jobName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        sse_encode_list_prim_u_8_loose(buffer, serializer);
        sse_encode_opt_String(jobName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterWriteDataConstMeta,
      argValues: [that, buffer, jobName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrintersLddWinPrinterWriteDataConstMeta =>
      const TaskConstMeta(
        debugName: "LddWinPrinter_write_data",
        argNames: ["that", "buffer", "jobName"],
      );

  @override
  Future<bool> crateApiPrintersLddWinPrinterWriteFile(
      {required LddWinPrinter that,
      required String filePath,
      String? jobName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            that, serializer);
        sse_encode_String(filePath, serializer);
        sse_encode_opt_String(jobName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiPrintersLddWinPrinterWriteFileConstMeta,
      argValues: [that, filePath, jobName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrintersLddWinPrinterWriteFileConstMeta =>
      const TaskConstMeta(
        debugName: "LddWinPrinter_write_file",
        argNames: ["that", "filePath", "jobName"],
      );

  @override
  Future<List<LddWinPrinter>> crateApiPrintersLddGetAllPrinters() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddGetAllPrintersConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrintersLddGetAllPrintersConstMeta =>
      const TaskConstMeta(
        debugName: "ldd_get_all_printers",
        argNames: [],
      );

  @override
  Future<LddWinPrinter?> crateApiPrintersLddGetPrinterByName(
      {required String name}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrintersLddGetPrinterByNameConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrintersLddGetPrinterByNameConstMeta =>
      const TaskConstMeta(
        debugName: "ldd_get_printer_by_name",
        argNames: ["name"],
      );

  @override
  String crateApiSerialportLddSerialPortInfoAutoAccessorGetPortName(
      {required LddSerialPortInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSerialportLddSerialPortInfoAutoAccessorGetPortNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSerialportLddSerialPortInfoAutoAccessorGetPortNameConstMeta =>
          const TaskConstMeta(
            debugName: "LddSerialPortInfo_auto_accessor_get_port_name",
            argNames: ["that"],
          );

  @override
  LddSerialPortType crateApiSerialportLddSerialPortInfoAutoAccessorGetPortType(
      {required LddSerialPortInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ldd_serial_port_type,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSerialportLddSerialPortInfoAutoAccessorGetPortTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSerialportLddSerialPortInfoAutoAccessorGetPortTypeConstMeta =>
          const TaskConstMeta(
            debugName: "LddSerialPortInfo_auto_accessor_get_port_type",
            argNames: ["that"],
          );

  @override
  void crateApiSerialportLddSerialPortInfoAutoAccessorSetPortName(
      {required LddSerialPortInfo that, required String portName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
            that, serializer);
        sse_encode_String(portName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSerialportLddSerialPortInfoAutoAccessorSetPortNameConstMeta,
      argValues: [that, portName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSerialportLddSerialPortInfoAutoAccessorSetPortNameConstMeta =>
          const TaskConstMeta(
            debugName: "LddSerialPortInfo_auto_accessor_set_port_name",
            argNames: ["that", "portName"],
          );

  @override
  void crateApiSerialportLddSerialPortInfoAutoAccessorSetPortType(
      {required LddSerialPortInfo that, required LddSerialPortType portType}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
            that, serializer);
        sse_encode_ldd_serial_port_type(portType, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSerialportLddSerialPortInfoAutoAccessorSetPortTypeConstMeta,
      argValues: [that, portType],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSerialportLddSerialPortInfoAutoAccessorSetPortTypeConstMeta =>
          const TaskConstMeta(
            debugName: "LddSerialPortInfo_auto_accessor_set_port_type",
            argNames: ["that", "portType"],
          );

  @override
  Future<void> crateApiSerialportLddSerialPortInfoOpen(
      {required LddSerialPortInfo that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSerialportLddSerialPortInfoOpenConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSerialportLddSerialPortInfoOpenConstMeta =>
      const TaskConstMeta(
        debugName: "LddSerialPortInfo_open",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiSerialportNavitePortWriteAll(
      {required NavitePort that, required List<int> buff}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort(
            that, serializer);
        sse_encode_list_prim_u_8_loose(buff, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSerialportNavitePortWriteAllConstMeta,
      argValues: [that, buff],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSerialportNavitePortWriteAllConstMeta =>
      const TaskConstMeta(
        debugName: "NavitePort_write_all",
        argNames: ["that", "buff"],
      );

  @override
  Future<List<LddSerialPortInfo>> crateApiSerialportGetAvailablePorts() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSerialportGetAvailablePortsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSerialportGetAvailablePortsConstMeta =>
      const TaskConstMeta(
        debugName: "get_available_ports",
        argNames: [],
      );

  @override
  Future<NavitePort> crateApiSerialportTryGetPort(
      {required String path, required int baudRate}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        sse_encode_u_32(baudRate, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSerialportTryGetPortConstMeta,
      argValues: [path, baudRate],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSerialportTryGetPortConstMeta =>
      const TaskConstMeta(
        debugName: "try_get_port",
        argNames: ["path", "baudRate"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddSerialPortInfo => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddSerialPortInfo => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LddWinPrinter => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LddWinPrinter => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NavitePort => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NavitePort => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort;

  @protected
  LddSerialPortInfo
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddSerialPortInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddWinPrinter
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddWinPrinterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NavitePort
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NavitePortImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddSerialPortInfo
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddSerialPortInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddWinPrinter
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddWinPrinterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NavitePort
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NavitePortImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddSerialPortInfo
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddSerialPortInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddWinPrinter
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddWinPrinterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddSerialPortInfo
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddSerialPortInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LddWinPrinter
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddWinPrinterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NavitePort
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NavitePortImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  LddWinPrinter
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
        raw);
  }

  @protected
  LddUsbPortInfo dco_decode_box_autoadd_ldd_usb_port_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ldd_usb_port_info(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  LddPrinterState dco_decode_ldd_printer_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LddPrinterState.values[raw as int];
  }

  @protected
  LddSerialPortType dco_decode_ldd_serial_port_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LddSerialPortType_UsbPort(
          dco_decode_box_autoadd_ldd_usb_port_info(raw[1]),
        );
      case 1:
        return LddSerialPortType_PciPort();
      case 2:
        return LddSerialPortType_BluetoothPort();
      case 3:
        return LddSerialPortType_Unknown();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  LddUsbPortInfo dco_decode_ldd_usb_port_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return LddUsbPortInfo(
      vid: dco_decode_u_16(arr[0]),
      pid: dco_decode_u_16(arr[1]),
      serialNumber: dco_decode_opt_String(arr[2]),
      manufacturer: dco_decode_opt_String(arr[3]),
      product: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  List<LddSerialPortInfo>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo)
        .toList();
  }

  @protected
  List<LddWinPrinter>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter)
        .toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  LddWinPrinter?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
            raw);
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  LddSerialPortInfo
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddSerialPortInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddWinPrinter
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddWinPrinterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NavitePort
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NavitePortImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddSerialPortInfo
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddSerialPortInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddWinPrinter
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddWinPrinterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NavitePort
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NavitePortImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddSerialPortInfo
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddSerialPortInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddWinPrinter
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddWinPrinterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddSerialPortInfo
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddSerialPortInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LddWinPrinter
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LddWinPrinterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NavitePort
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NavitePortImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  LddWinPrinter
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
        deserializer));
  }

  @protected
  LddUsbPortInfo sse_decode_box_autoadd_ldd_usb_port_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ldd_usb_port_info(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  LddPrinterState sse_decode_ldd_printer_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LddPrinterState.values[inner];
  }

  @protected
  LddSerialPortType sse_decode_ldd_serial_port_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_ldd_usb_port_info(deserializer);
        return LddSerialPortType_UsbPort(var_field0);
      case 1:
        return LddSerialPortType_PciPort();
      case 2:
        return LddSerialPortType_BluetoothPort();
      case 3:
        return LddSerialPortType_Unknown();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  LddUsbPortInfo sse_decode_ldd_usb_port_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_vid = sse_decode_u_16(deserializer);
    var var_pid = sse_decode_u_16(deserializer);
    var var_serialNumber = sse_decode_opt_String(deserializer);
    var var_manufacturer = sse_decode_opt_String(deserializer);
    var var_product = sse_decode_opt_String(deserializer);
    return LddUsbPortInfo(
        vid: var_vid,
        pid: var_pid,
        serialNumber: var_serialNumber,
        manufacturer: var_manufacturer,
        product: var_product);
  }

  @protected
  List<LddSerialPortInfo>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LddSerialPortInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<LddWinPrinter>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LddWinPrinter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LddWinPrinter?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          LddSerialPortInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddSerialPortInfoImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          LddWinPrinter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddWinPrinterImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort(
          NavitePort self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NavitePortImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          LddSerialPortInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddSerialPortInfoImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          LddWinPrinter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddWinPrinterImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort(
          NavitePort self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NavitePortImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          LddSerialPortInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddSerialPortInfoImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          LddWinPrinter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddWinPrinterImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          LddSerialPortInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddSerialPortInfoImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          LddWinPrinter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LddWinPrinterImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNavitePort(
          NavitePort self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NavitePortImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          LddWinPrinter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ldd_usb_port_info(
      LddUsbPortInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ldd_usb_port_info(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_ldd_printer_state(
      LddPrinterState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ldd_serial_port_type(
      LddSerialPortType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LddSerialPortType_UsbPort(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_ldd_usb_port_info(field0, serializer);
      case LddSerialPortType_PciPort():
        sse_encode_i_32(1, serializer);
      case LddSerialPortType_BluetoothPort():
        sse_encode_i_32(2, serializer);
      case LddSerialPortType_Unknown():
        sse_encode_i_32(3, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_ldd_usb_port_info(
      LddUsbPortInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.vid, serializer);
    sse_encode_u_16(self.pid, serializer);
    sse_encode_opt_String(self.serialNumber, serializer);
    sse_encode_opt_String(self.manufacturer, serializer);
    sse_encode_opt_String(self.product, serializer);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          List<LddSerialPortInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddSerialPortInfo(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          List<LddWinPrinter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          LddWinPrinter? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddWinPrinter(
          self, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class LddSerialPortInfoImpl extends RustOpaque implements LddSerialPortInfo {
  // Not to be used by end users
  LddSerialPortInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LddSerialPortInfoImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LddSerialPortInfo,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LddSerialPortInfo,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_LddSerialPortInfoPtr,
  );

  String get portName => RustLib.instance.api
          .crateApiSerialportLddSerialPortInfoAutoAccessorGetPortName(
        that: this,
      );

  LddSerialPortType get portType => RustLib.instance.api
          .crateApiSerialportLddSerialPortInfoAutoAccessorGetPortType(
        that: this,
      );

  set portName(String portName) => RustLib.instance.api
      .crateApiSerialportLddSerialPortInfoAutoAccessorSetPortName(
          that: this, portName: portName);

  set portType(LddSerialPortType portType) => RustLib.instance.api
      .crateApiSerialportLddSerialPortInfoAutoAccessorSetPortType(
          that: this, portType: portType);

  Future<void> open() =>
      RustLib.instance.api.crateApiSerialportLddSerialPortInfoOpen(
        that: this,
      );
}

@sealed
class LddWinPrinterImpl extends RustOpaque implements LddWinPrinter {
  // Not to be used by end users
  LddWinPrinterImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LddWinPrinterImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LddWinPrinter,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LddWinPrinter,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LddWinPrinterPtr,
  );

  String get driverName => RustLib.instance.api
          .crateApiPrintersLddWinPrinterAutoAccessorGetDriverName(
        that: this,
      );

  bool get isDefault => RustLib.instance.api
          .crateApiPrintersLddWinPrinterAutoAccessorGetIsDefault(
        that: this,
      );

  bool get isShared =>
      RustLib.instance.api.crateApiPrintersLddWinPrinterAutoAccessorGetIsShared(
        that: this,
      );

  String get location =>
      RustLib.instance.api.crateApiPrintersLddWinPrinterAutoAccessorGetLocation(
        that: this,
      );

  String get name =>
      RustLib.instance.api.crateApiPrintersLddWinPrinterAutoAccessorGetName(
        that: this,
      );

  LddPrinterState get state =>
      RustLib.instance.api.crateApiPrintersLddWinPrinterAutoAccessorGetState(
        that: this,
      );

  String get systemName => RustLib.instance.api
          .crateApiPrintersLddWinPrinterAutoAccessorGetSystemName(
        that: this,
      );

  String get uri =>
      RustLib.instance.api.crateApiPrintersLddWinPrinterAutoAccessorGetUri(
        that: this,
      );

  set driverName(String driverName) => RustLib.instance.api
      .crateApiPrintersLddWinPrinterAutoAccessorSetDriverName(
          that: this, driverName: driverName);

  set isDefault(bool isDefault) => RustLib.instance.api
      .crateApiPrintersLddWinPrinterAutoAccessorSetIsDefault(
          that: this, isDefault: isDefault);

  set isShared(bool isShared) =>
      RustLib.instance.api.crateApiPrintersLddWinPrinterAutoAccessorSetIsShared(
          that: this, isShared: isShared);

  set location(String location) =>
      RustLib.instance.api.crateApiPrintersLddWinPrinterAutoAccessorSetLocation(
          that: this, location: location);

  set name(String name) => RustLib.instance.api
      .crateApiPrintersLddWinPrinterAutoAccessorSetName(that: this, name: name);

  set state(LddPrinterState state) =>
      RustLib.instance.api.crateApiPrintersLddWinPrinterAutoAccessorSetState(
          that: this, state: state);

  set systemName(String systemName) => RustLib.instance.api
      .crateApiPrintersLddWinPrinterAutoAccessorSetSystemName(
          that: this, systemName: systemName);

  set uri(String uri) => RustLib.instance.api
      .crateApiPrintersLddWinPrinterAutoAccessorSetUri(that: this, uri: uri);

  ///打印数据
  Future<bool> writeData({required List<int> buffer, String? jobName}) =>
      RustLib.instance.api.crateApiPrintersLddWinPrinterWriteData(
          that: this, buffer: buffer, jobName: jobName);

  ///打印文件
  Future<bool> writeFile({required String filePath, String? jobName}) =>
      RustLib.instance.api.crateApiPrintersLddWinPrinterWriteFile(
          that: this, filePath: filePath, jobName: jobName);
}

@sealed
class NavitePortImpl extends RustOpaque implements NavitePort {
  // Not to be used by end users
  NavitePortImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NavitePortImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NavitePort,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NavitePort,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NavitePortPtr,
  );

  ///写入数据
  Future<void> writeAll({required List<int> buff}) => RustLib.instance.api
      .crateApiSerialportNavitePortWriteAll(that: this, buff: buff);
}
